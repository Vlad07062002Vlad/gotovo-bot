import os
import io
import logging
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from collections import defaultdict

from telegram import Update, BotCommand, ReplyKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from openai import AsyncOpenAI
from PIL import Image
import pytesseract
# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("gotovo-bot")

# ---------- –û–ö–†–£–ñ–ï–ù–ò–ï ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", "8080"))

if not TELEGRAM_TOKEN:
    raise SystemExit("–ù–µ—Ç TELEGRAM_TOKEN (flyctl secrets set TELEGRAM_TOKEN=...)")
if not OPENAI_API_KEY:
    raise SystemExit("–ù–µ—Ç OPENAI_API_KEY (flyctl secrets set OPENAI_API_KEY=...)")

client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# ---------- Health-check –¥–ª—è Fly ----------
class _Health(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"ok")

def _run_health():
    HTTPServer(("0.0.0.0", PORT), _Health).serve_forever()

# ---------- –ü–ê–ú–Ø–¢–¨ (RAM) ----------
SUBJECTS = {
    "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è",
    "–∏—Å—Ç–æ—Ä–∏—è", "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–±–∏–æ–ª–æ–≥–∏—è", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "auto",
    "–±–µ–ª–∞—Ä—É—Å–∫–∞—è –º–æ–≤–∞", "–±–µ–ª–∞—Ä—É—Å–∫–∞—è –ª—ñ—Ç–∞—Ä–∞—Ç—É—Ä–∞"
}
USER_SUBJECT = defaultdict(lambda: "auto")
USER_GRADE = defaultdict(lambda: "8")
PARENT_MODE = defaultdict(lambda: False)
USER_STATE = defaultdict(lambda: None)  # None | "AWAIT_EXPLAIN" | "AWAIT_ESSAY" | "AWAIT_FOLLOWUP" | "AWAIT_TEXT_OR_PHOTO_CHOICE"

def kb(uid: int) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["üì∏ –§–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è", "üß† –û–±—ä—è—Å–Ω–∏—Ç—å", "üìù –°–æ—á–∏–Ω–µ–Ω–∏–µ"],
            [f"üìö –ü—Ä–µ–¥–º–µ—Ç: {USER_SUBJECT[uid]}", f"üéì –ö–ª–∞—Å—Å: {USER_GRADE[uid]}", f"üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç.: {'–≤–∫–ª' if PARENT_MODE[uid] else '–≤—ã–∫–ª'}"],
            ["üìã –ú–µ–Ω—é /menu", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
        ],
        resize_keyboard=True
    )

def sys_prompt(uid: int) -> str:
    subject = USER_SUBJECT[uid]
    grade = USER_GRADE[uid]
    parent = PARENT_MODE[uid]

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    if subject in ["–±–µ–ª–∞—Ä—É—Å–∫–∞—è –º–æ–≤–∞", "–±–µ–ª–∞—Ä—É—Å–∫–∞—è –ª—ñ—Ç–∞—Ä–∞—Ç—É—Ä–∞"]:
        return (
            "–¢—ã ‚Äî –Ü–Ü-–ø–∞–º–æ—á–Ω—ñ–∫ –ø–∞ –±–µ–ª–∞—Ä—É—Å–∫–∞–π –º–æ–≤–µ —ñ –ª—ñ—Ç–∞—Ä–∞—Ç—É—Ä—ã. "
            "–ê–¥–∫–∞–∑–≤–∞–π –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫–∞–π, –∫–∞–ª—ñ –∑–∞–¥–∞–Ω–Ω–µ –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫–∞–π. "
            "–ö–∞–ª—ñ –Ω–∞ —Ä–∞—Å–µ–π—Å–∫–∞–π ‚Äî –∞–¥–∫–∞–∑–≤–∞–π –Ω–∞ —Ä–∞—Å–µ–π—Å–∫–∞–π. "
            "–ü–∞–º—è—Ç–∞–π –ø—Ä–∞ –ø—Ä–∞–≤—ñ–ª—ã: –ª—ñ—Ç–∞—Ä–∞ '—û', –º—è–∫–∫—ñ –∑–Ω–∞–∫, —ñ —ñ–Ω—à. "
            "–ê–¥–∫–∞–∑ –ø—ñ—à—ã —Ç–æ–ª—å–∫—ñ –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫–∞–π –º–æ–≤–µ. "
            "–í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π —Ç–æ–ª—å–∫—ñ HTML-—Ç—ç–≥—ñ –¥–ª—è —Ñ–∞—Ä–º–∞—Ç–∞–≤–∞–Ω–Ω—è: <b>—Ç–ª—É—Å—Ç—ã</b>, <i>–∫—É—Ä—Å—ñ—û</i>, <code>–∫–æ–¥</code>. "
            "–ù–µ –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π Markdown (**, *, `)."
        )

    base = (
        "–¢—ã ‚Äî –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä. –û–±—ä—è—Å–Ω—è–π –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç: –ø—Ä–æ—Å—Ç–æ, –ø–æ —à–∞–≥–∞–º, —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∞–Ω–∞–ª–æ–≥–∏—è–º–∏. "
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: 1) –£—Å–ª–æ–≤–∏–µ ‚Üí 2) –†–µ—à–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º (—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è) ‚Üí 3) –ö—Ä–∞—Ç–∫–æ (–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø–æ–Ω—è–ª —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞). "
        "–î–æ–±–∞–≤–ª—è–π 1‚Äì2 –≤–æ–ø—Ä–æ—Å–∞ –ü–û –≠–¢–û–ú–£ –ó–ê–î–ê–ù–ò–Æ ‚Äî —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏, –Ω–µ –¥–∞–≤–∞—è –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç. "
        "–ù–µ –∑–∞–¥–∞–≤–∞–π –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –ù–µ —É—Ö–æ–¥–∏ –≤ —Ç–µ–º—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º. "
        "–ù–µ –≤—Å—Ç—É–ø–∞–π –≤ –¥–∏–∞–ª–æ–≥. –í–æ–ø—Ä–æ—Å ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –±–µ—Å–µ–¥–µ. "
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code>. "
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown (**, *, `)."
    )
    sub = f"–ü—Ä–µ–¥–º–µ—Ç: {subject}." if subject != "auto" else "–û–ø—Ä–µ–¥–µ–ª–∏ —Å–∞–º."
    grd = f"–ö–ª–∞—Å—Å: {grade}."
    par = (
        "<b>–ü–∞–º—è—Ç–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:</b><br>"
        "1) –ö–∞–∫–∞—è —Ç–µ–º–∞ –∏–∑—É—á–∞–µ—Ç—Å—è.<br>"
        "2) –ß—Ç–æ –≤–∞–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É —Ä–µ–±—ë–Ω–∫–∞.<br>"
        "3) –ö–∞–∫ –º—è–≥–∫–æ –ø–æ–º–æ—á—å, –µ—Å–ª–∏ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç."
    ) if parent else ""
    return f"{base} {sub} {grd} {par}"

# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def set_commands(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å–∫"),
        BotCommand("menu", "–ú–µ–Ω—é"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
        BotCommand("subject", "–ü—Ä–µ–¥–º–µ—Ç (–∏–ª–∏ auto)"),
        BotCommand("grade", "–ö–ª–∞—Å—Å 5‚Äì11"),
        BotCommand("parent", "–†–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π on/off"),
        BotCommand("essay", "–°–æ—á–∏–Ω–µ–Ω–∏–µ: /essay –¢–ï–ú–ê"),
        BotCommand("explain", "–û–±—ä—è—Å–Ω–∏—Ç—å: /explain –¢–ï–ö–°–¢"),
        BotCommand("about", "–û –±–æ—Ç–µ –∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"),
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>–ì–æ—Ç–æ–≤–æ!</b> –ü–æ–º–æ–≥–∞—é –ø–æ–Ω—è—Ç—å –î–ó.\n"
        "–ü–∏—à–∏ —Ç–µ–∫—Å—Ç, –∫–∏–¥–∞–π —Ñ–æ—Ç–æ –∏–ª–∏ –∂–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=kb(uid),
        parse_mode="HTML"
    )

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await about_cmd(update, context)

async def about_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "<b>üìò –û –±–æ—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ!¬ª</b>\n\n"
        "–Ø ‚Äî —à–∫–æ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å –¥–æ–º–∞—à–∫–æ–π, "
        "–æ–±—ä—è—Å–Ω—è—è –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç: –ø—Ä–æ—Å—Ç–æ, –ø–æ —à–∞–≥–∞–º, –±–µ–∑ –≤–æ–¥—ã.\n\n"

        "<b>üéØ –ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚Ä¢ üì∏ –ü—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è ‚Äî —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é, —Ä–µ—à—É –∏ –æ–±—ä—è—Å–Ω—é\n"
        "‚Ä¢ üß† –ù–∞–ø–∏—à–∏ /explain ‚Äî –æ–±—ä—è—Å–Ω—é –ª—é–±—É—é —Ç–µ–º—É\n"
        "‚Ä¢ üìù –ù–∞–ø–∏—à–∏ /essay ‚Äî –Ω–∞–ø–∏—à—É —Å–æ—á–∏–Ω–µ–Ω–∏–µ\n"
        "‚Ä¢ üìö –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏ –∫–ª–∞—Å—Å\n"
        "‚Ä¢ üë®‚Äçüë©‚Äçüëß –í–∫–ª—é—á–∏ —Ä–µ–∂–∏–º –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π ‚Äî –ø–æ–ª—É—á–∏—à—å –ø–∞–º—è—Ç–∫—É\n\n"

        "<b>üìå –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é\n"
        "2. –ò–ª–∏ –ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É: /help, /essay, /explain\n"
        "3. –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ ‚Äî –º–æ–∂–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å: ¬´–î–∞¬ª –∏–ª–∏ ¬´–ù–µ—Ç¬ª\n\n"

        "<b>üí° –°–æ–≤–µ—Ç:</b> –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Å–Ω—è—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º.\n\n"

        "–°–æ–∑–¥–∞–Ω –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ 5‚Äì11 –∫–ª–∞—Å—Å–æ–≤. ¬© 2025",
        parse_mode="HTML",
        reply_markup=kb(update.effective_user.id)
    )

async def subject_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω–æ: " + ", ".join(sorted(SUBJECTS)), reply_markup=kb(uid))
    val = " ".join(context.args).strip().lower()
    if val not in SUBJECTS:
        return await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –ø—Ä–µ–¥–º–µ—Ç. –î–æ—Å—Ç—É–ø–Ω–æ: " + ", ".join(sorted(SUBJECTS)), reply_markup=kb(uid))
    USER_SUBJECT[uid] = val
    await update.message.reply_text(f"–ü—Ä–µ–¥–º–µ—Ç: {val}", reply_markup=kb(uid))

async def grade_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args or context.args[0] not in [str(i) for i in range(5, 12)]:
        return await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /grade 7", reply_markup=kb(uid))
    USER_GRADE[uid] = context.args[0]
    await update.message.reply_text(f"–ö–ª–∞—Å—Å: {USER_GRADE[uid]}", reply_markup=kb(uid))

async def parent_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args or context.args[0].lower() not in {"on", "off"}:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /parent on  –∏–ª–∏  /parent off", reply_markup=kb(uid))
    PARENT_MODE[uid] = (context.args[0].lower() == "on")
    status = "–≤–∫–ª" if PARENT_MODE[uid] else "–≤—ã–∫–ª"
    await update.message.reply_text(f"–†–µ–∂–∏–º –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {status}", reply_markup=kb(uid))

# ---------- GPT-—Ö–µ–ª–ø–µ—Ä—ã ----------
async def gpt_explain(uid: int, prompt: str) -> str:
    log.info(f"EXPLAIN uid={uid} subj={USER_SUBJECT[uid]} grade={USER_GRADE[uid]} text={prompt[:60]}")
    resp = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": sys_prompt(uid)},
            {"role": "user", "content": f"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {prompt}"}
        ],
        temperature=0.3,
        max_tokens=900
    )
    return resp.choices[0].message.content.strip()

async def gpt_essay(uid: int, topic: str) -> str:
    log.info(f"ESSAY uid={uid} topic={topic[:60]}")
    resp = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": f"–¢—ã ‚Äî —É—á–µ–Ω–∏–∫ {USER_GRADE[uid]} –∫–ª–∞—Å—Å–∞. –ü–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ —É—á–µ–Ω–∏–∫: –ø—Ä–æ—Å—Ç–æ, –ø–æ –¥–µ–ª—É, 150‚Äì200 —Å–ª–æ–≤. –ë–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown (**, *, `)."},
            {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ. –¢–µ–º–∞: {topic}"}
        ],
        temperature=0.7,
        max_tokens=700
    )
    return resp.choices[0].message.content.strip()

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
async def explain_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = " ".join(context.args).strip()
    if not text:
        USER_STATE[uid] = "AWAIT_EXPLAIN"
        return await update.message.reply_text("üß† –ß—Ç–æ –æ–±—ä—è—Å–Ω–∏—Ç—å? –ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π.", reply_markup=kb(uid))
    try:
        await context.bot.send_chat_action(update.effective_chat.id, ChatAction.TYPING)
        out = await gpt_explain(uid, text)
        await update.message.reply_text(out[:4000], reply_markup=kb(uid), parse_mode="HTML", disable_web_page_preview=True)
        keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–•–æ—á–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –ø–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é?", reply_markup=keyboard)
        USER_STATE[uid] = "AWAIT_FOLLOWUP"
    except Exception as e:
        log.exception("explain")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=kb(uid))

async def essay_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    topic = " ".join(context.args).strip()
    if not topic:
        USER_STATE[uid] = "AWAIT_ESSAY"
        return await update.message.reply_text("üìù –¢–µ–º–∞ —Å–æ—á–∏–Ω–µ–Ω–∏—è?", reply_markup=kb(uid))
    
    try:
        await context.bot.send_chat_action(update.effective_chat.id, ChatAction.TYPING)
        
        # –®–∞–≥ 1: –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ
        essay = await gpt_essay(uid, topic)
        await update.message.reply_text(essay[:4000], parse_mode="HTML", disable_web_page_preview=True)

        # –®–∞–≥ 2: –û–±—ä—è—Å–Ω–∏—Ç—å, –∫–∞–∫ –ø–∏—Å–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ—á–∏–Ω–µ–Ω–∏—è
        explain_prompt = (
            f"–û–±—ä—è—Å–Ω–∏, –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É: '{topic}'. "
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: 1) –£—Å–ª–æ–≤–∏–µ ‚Üí 2) –†–µ—à–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º (–∫–∞–∫ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç) ‚Üí 3) –ö—Ä–∞—Ç–∫–æ. "
            "–î–æ–±–∞–≤—å 1‚Äì2 –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è. "
            "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown (**, *, `)."
        )
        explanation = await gpt_explain(uid, explain_prompt)
        await update.message.reply_text(explanation[:4000], parse_mode="HTML", disable_web_page_preview=True)

        # –®–∞–≥ 3: –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Ç–æ—á–Ω–∏—Ç—å
        keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–•–æ—á–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ —Å–æ—á–∏–Ω–µ–Ω–∏—é?", reply_markup=keyboard)
        USER_STATE[uid] = "AWAIT_FOLLOWUP"

    except Exception as e:
        log.exception("essay")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=kb(uid))

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    try:
        await context.bot.send_chat_action(update.effective_chat.id, ChatAction.TYPING)
        file = await update.message.photo[-1].get_file()
        data = await file.download_as_bytearray()
        img = Image.open(io.BytesIO(data))
        ocr_text = pytesseract.image_to_string(img, lang="rus+eng")
        log.info(f"OCR uid={uid} text={ocr_text.strip()!r}")

        if not ocr_text.strip():
            raise ValueError("OCR returned empty text")

        await update.message.reply_text(f"üîé –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{ocr_text.strip()}", reply_markup=kb(uid))

        out = await gpt_explain(uid, ocr_text)
        
        await update.message.reply_text(out[:4000], reply_markup=kb(uid), parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        log.exception("photo")
        keyboard = ReplyKeyboardMarkup(
            [["üì∏ –†–µ—à–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ", "‚úçÔ∏è –ù–∞–ø–∏—à—É —Ç–µ–∫—Å—Ç–æ–º"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–º:",
            reply_markup=keyboard
        )
        USER_STATE[uid] = "AWAIT_TEXT_OR_PHOTO_CHOICE"

# ---------- –¢–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ ----------
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = (update.message.text or "").strip().lower()
    state = USER_STATE[uid]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ
    if state == "AWAIT_TEXT_OR_PHOTO_CHOICE":
        if text == "üì∏ —Ä–µ—à–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ":
            USER_STATE[uid] = None
            return await update.message.reply_text("–•–æ—Ä–æ—à–æ! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è.", reply_markup=kb(uid))
        elif text == "‚úçÔ∏è –Ω–∞–ø–∏—à—É —Ç–µ–∫—Å—Ç–æ–º":
            USER_STATE[uid] = "AWAIT_EXPLAIN"
            return await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º ‚Äî —è –ø–æ–º–æ–≥—É.", reply_markup=kb(uid))
        else:
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏: '–†–µ—à–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ' –∏–ª–∏ '–ù–∞–ø–∏—à—É —Ç–µ–∫—Å—Ç–æ–º'")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è
    if state == "AWAIT_FOLLOWUP":
        if text == "–¥–∞":
            USER_STATE[uid] = "AWAIT_EXPLAIN"
            return await update.message.reply_text("–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ?", reply_markup=kb(uid))
        elif text == "–Ω–µ—Ç":
            USER_STATE[uid] = None
            return await update.message.reply_text("–•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ —á—Ç–æ ‚Äî –ø–∏—à–∏ —Å–Ω–æ–≤–∞.", reply_markup=kb(uid))
        else:
            return await update.message.reply_text("–û—Ç–≤–µ—Ç—å: –î–∞ –∏–ª–∏ –ù–µ—Ç")

    # –ö–Ω–æ–ø–∫–∏
    if text == "üß† –æ–±—ä—è—Å–Ω–∏—Ç—å":           return await explain_cmd(update, context)
    if text == "üìù —Å–æ—á–∏–Ω–µ–Ω–∏–µ":           return await essay_cmd(update, context)
    if text == "üì∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è":        return await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ–±—ä—è—Å–Ω—é.", reply_markup=kb(uid))
    if text.startswith("üìö –ø—Ä–µ–¥–º–µ—Ç:"):   return await update.message.reply_text("–°–º–µ–Ω–∏—Ç—å: /subject <–Ω–∞–∑–≤–∞–Ω–∏–µ|auto>", reply_markup=kb(uid))
    if text.startswith("üéì –∫–ª–∞—Å—Å:"):     return await update.message.reply_text("–°–º–µ–Ω–∏—Ç—å: /grade 5‚Äì11", reply_markup=kb(uid))
    if text.startswith("üë®‚Äçüë©‚Äçüëß —Ä–æ–¥–∏—Ç.:"): return await update.message.reply_text("–í–∫–ª/–≤—ã–∫–ª: /parent on|off", reply_markup=kb(uid))
    if text in {"üìã –º–µ–Ω—é /menu", "‚ÑπÔ∏è –ø–æ–º–æ—â—å"}: return await help_cmd(update, context)

    # –°–æ—Å—Ç–æ—è–Ω–∏—è
    if state == "AWAIT_EXPLAIN":
        USER_STATE[uid] = None
        context.args = [text]
        return await explain_cmd(update, context)
    if state == "AWAIT_ESSAY":
        USER_STATE[uid] = None
        context.args = [text]
        return await essay_cmd(update, context)

    # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç = –æ–±—ä—è—Å–Ω–∏—Ç—å
    context.args = [text]
    return await explain_cmd(update, context)

# ---------- MAIN ----------
def main():
    threading.Thread(target=_run_health, daemon=True).start()
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.post_init = set_commands

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_cmd))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("about", about_cmd))
    app.add_handler(CommandHandler("subject", subject_cmd))
    app.add_handler(CommandHandler("grade", grade_cmd))
    app.add_handler(CommandHandler("parent", parent_cmd))
    app.add_handler(CommandHandler("essay", essay_cmd))
    app.add_handler(CommandHandler("explain", explain_cmd))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    log.info("Gotovo bot is running‚Ä¶")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
