import os, base64, logging, threading
from io import BytesIO
from http.server import BaseHTTPRequestHandler, HTTPServer
from collections import defaultdict

from telegram import Update, BotCommand, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

import openai

# ===== –õ–û–ì–ò =====
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("gotovo-bot")

# ===== –û–ö–†–£–ñ–ï–ù–ò–ï =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", "8080"))
if not TELEGRAM_TOKEN:
    raise SystemExit("–ù–µ—Ç TELEGRAM_TOKEN (flyctl secrets set TELEGRAM_TOKEN=...)")
if not OPENAI_API_KEY:
    raise SystemExit("–ù–µ—Ç OPENAI_API_KEY (flyctl secrets set OPENAI_API_KEY=...)")

# ===== OpenAI =====
client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)

# ===== Health-check –¥–ª—è Fly =====
class _Health(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200); self.end_headers(); self.wfile.write(b"ok")
def _run_health():
    HTTPServer(("0.0.0.0", PORT), _Health).serve_forever()

# ===== –ü–ê–ú–Ø–¢–¨ (RAM) =====
USER_SUBJECT = defaultdict(lambda: "auto")   # –ø—Ä–µ–¥–º–µ—Ç: –æ–¥–Ω–æ –∏–∑ SUBJECTS –∏–ª–∏ "auto"
USER_GRADE   = defaultdict(lambda: "8")      # –∫–ª–∞—Å—Å: "5"‚Äì"11"
PARENT_MODE  = defaultdict(lambda: False)    # –ø–∞–º—è—Ç–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π: on/off

SUBJECTS = {
    "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞","—Ä—É—Å—Å–∫–∏–π","–∞–Ω–≥–ª–∏–π—Å–∫–∏–π","—Ñ–∏–∑–∏–∫–∞","—Ö–∏–º–∏—è",
    "–∏—Å—Ç–æ—Ä–∏—è","–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ","–±–∏–æ–ª–æ–≥–∏—è","–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è","–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞","auto"
}

# ===== –£–¢–ò–õ–ò–¢–´ =====
def kb(uid:int)->ReplyKeyboardMarkup:
    subj = USER_SUBJECT[uid]
    grd  = USER_GRADE[uid]
    pm   = "–≤–∫–ª" if PARENT_MODE[uid] else "–≤—ã–∫–ª"
    return ReplyKeyboardMarkup(
        [
            ["üì∏ –§–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è", "üß† –û–±—ä—è—Å–Ω–∏—Ç—å", "üìù –°–æ—á–∏–Ω–µ–Ω–∏–µ"],
            [f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subj}", f"üéì –ö–ª–∞—Å—Å: {grd}", f"üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç.: {pm}"],
        ],
        resize_keyboard=True
    )

def system_prompt(subject: str, grade: str, parent: bool) -> str:
    base = (
        "–¢—ã ‚Äî –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ –§–ì–û–°. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç: –ø—Ä–æ—Å—Ç–æ, –ø–æ —à–∞–≥–∞–º, "
        "–±–µ–∑ –∑–∞—É–º–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∞–Ω–∞–ª–æ–≥–∏—è–º–∏. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: "
        "1) –ö–æ—Ä–æ—Ç–∫–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π *—É—Å–ª–æ–≤–∏–µ*, 2) –î–∞–π *—Ä–µ—à–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º*, 3) –ò—Ç–æ–≥ *–ö—Ä–∞—Ç–∫–æ* (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). "
        "–ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ ‚Äî 1‚Äì2 –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞."
    )
    sub = f"–ü—Ä–µ–¥–º–µ—Ç: {subject}." if subject != "auto" else "–û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–µ–¥–º–µ—Ç —Å–∞–º."
    grd = f"–ö–ª–∞—Å—Å: {grade}."
    par = "–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫—É—é –ø–∞–º—è—Ç–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π: –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –¥–æ–º–∞." if parent else ""
    return f"{base} {sub} {grd} {par}"

# ===== –ö–û–ú–ê–ù–î–´ =====
async def set_commands(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å–∫"),
        BotCommand("help", "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"),
        BotCommand("subject", "–ó–∞–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç (–∏–ª–∏ auto)"),
        BotCommand("grade", "–ó–∞–¥–∞—Ç—å –∫–ª–∞—Å—Å 5‚Äì11"),
        BotCommand("parent", "–†–µ–∂–∏–º –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π: on/off"),
        BotCommand("essay", "–°–æ—á–∏–Ω–µ–Ω–∏–µ: /essay –¢–ï–ú–ê"),
        BotCommand("explain", "–û–±—ä—è—Å–Ω–∏—Ç—å: /explain –¢–ï–ö–°–¢"),
        BotCommand("diag", "–ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI"),
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *–ì–æ—Ç–æ–≤–æ!* –ü–æ–º–æ–≥–∞—é –ø–æ–Ω—è—Ç—å –î–ó.\n"
        "–ü–æ—à–∞–≥–æ–≤–æ, –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá",
        reply_markup=kb(uid), parse_mode="Markdown"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await update.message.reply_text(
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ–±—ä—è—Å–Ω—é –ø–æ —à–∞–≥–∞–º.\n"
        "‚Ä¢ /explain –¢–ï–ö–°–¢ ‚Äî –æ–±—ä—è—Å–Ω—é —Ç–µ–º—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.\n"
        "‚Ä¢ /essay –¢–ï–ú–ê ‚Äî —Å–æ—á–∏–Ω–µ–Ω–∏–µ 150‚Äì200 —Å–ª–æ–≤ (–∫–∞–∫ —É—á–µ–Ω–∏–∫).\n"
        "‚Ä¢ /subject <–ø—Ä–µ–¥–º–µ—Ç|auto> ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —Ñ–∏–∑–∏–∫–∞, —Ö–∏–º–∏—è, –∏—Å—Ç–æ—Ä–∏—è, –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ, –±–∏–æ–ª–æ–≥–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞.\n"
        "‚Ä¢ /grade 5‚Äì11 ‚Äî —É—á—Ç—É —É—Ä–æ–≤–µ–Ω—å.\n"
        "‚Ä¢ /parent on|off ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–∞–º—è—Ç–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞.",
        reply_markup=kb(uid)
    )

async def subject_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        return await update.message.reply_text("–£–∫–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç: " + ", ".join(sorted(SUBJECTS)))
    val = " ".join(context.args).strip().lower()
    if val not in SUBJECTS:
        return await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –ø—Ä–µ–¥–º–µ—Ç. –î–æ—Å—Ç—É–ø–Ω–æ: " + ", ".join(sorted(SUBJECTS)))
    USER_SUBJECT[uid] = val
    await update.message.reply_text(f"–ü—Ä–µ–¥–º–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {val}", reply_markup=kb(uid))

async def grade_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args or context.args[0] not in [str(i) for i in range(5,12)]:
        return await update.message.reply_text("–£–∫–∞–∂–∏ –∫–ª–∞—Å—Å 5‚Äì11. –ü—Ä–∏–º–µ—Ä: /grade 7")
    USER_GRADE[uid] = context.args[0]
    await update.message.reply_text(f"–ö–ª–∞—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {USER_GRADE[uid]}", reply_markup=kb(uid))

async def parent_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args or context.args[0].lower() not in {"on","off"}:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /parent on  –∏–ª–∏  /parent off")
    PARENT_MODE[uid] = (context.args[0].lower() == "on")
    state = "–≤–∫–ª—é—á—ë–Ω" if PARENT_MODE[uid] else "–≤—ã–∫–ª—é—á–µ–Ω"
    await update.message.reply_text(f"–†–µ–∂–∏–º –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π {state}.", reply_markup=kb(uid))

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò GPT =====
async def essay_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    topic = " ".join(context.args).strip()
    if not topic:
        return await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É: `/essay –°–º—ã—Å–ª —Ä–∞—Å—Å–∫–∞–∑–∞ '–ú—É–º—É'`", parse_mode="Markdown")
    try:
        await update.message.chat.send_action("typing")
        resp = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role":"system","content": system_prompt(USER_SUBJECT[uid], USER_GRADE[uid], PARENT_MODE[uid])},
                {"role":"user","content": f"–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ 150‚Äì200 —Å–ª–æ–≤ –ø–æ —Ç–µ–º–µ: {topic}. –ü–∏—à–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫ {USER_GRADE[uid]} –∫–ª–∞—Å—Å–∞."}
            ],
            temperature=0.7, max_tokens=700
        )
        await update.message.reply_text(resp.choices[0].message.content.strip()[:4000], reply_markup=kb(uid))
    except Exception as e:
        log.exception("essay")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=kb(uid))

async def explain_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = " ".join(context.args).strip()
    if not text:
        return await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: `/explain –∫–∞–∫ —Ä–µ—à–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è`", parse_mode="Markdown")
    try:
        await update.message.chat.send_action("typing")
        resp = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role":"system","content": system_prompt(USER_SUBJECT[uid], USER_GRADE[uid], PARENT_MODE[uid])},
                {"role":"user","content": f"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è {USER_GRADE[uid]} –∫–ª–∞—Å—Å–∞: {text}"}
            ],
            temperature=0.3, max_tokens=900
        )
        await update.message.reply_text(resp.choices[0].message.content.strip()[:4000], reply_markup=kb(uid))
    except Exception as e:
        log.exception("explain")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=kb(uid))

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    try:
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞–Ω–∏–µ‚Ä¶", reply_markup=kb(uid))
        f = await update.message.photo[-1].get_file()
        data = await f.download_as_bytearray()
        b64 = base64.b64encode(data).decode("utf-8")

        messages = [
            {"role":"system","content": system_prompt(USER_SUBJECT[uid], USER_GRADE[uid], PARENT_MODE[uid])},
            {"role":"user","content":[
                {"type":"text","text":"–†–∞—Å–ø–æ–∑–Ω–∞–π —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ (–∏—Å–ø—Ä–∞–≤—å OCR-–æ—à–∏–±–∫–∏ –ø–æ —Å–º—ã—Å–ª—É). –†–µ—à–∏ –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ —à–∞–≥–∞–º. –ï—Å–ª–∏ —ç—Ç–æ —è–∑—ã–∫ ‚Äî –¥–∞–π –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø—Ä–∏–º–µ—Ä—ã, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è/–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∑–∏—Å—ã –∏ –æ—Ç–≤–µ—Ç."},
                {"type":"image_url","image_url":{"url":f"data:image/jpeg;base64,{b64}"}}
            ]}
        ]
        resp = await client.chat.completions.create(
            model="gpt-4o",
            messages=messages, temperature=0.2, max_tokens=1200
        )
        await update.message.reply_text(resp.choices[0].message.content.strip()[:4000], reply_markup=kb(uid))
    except Exception as e:
        log.exception("photo")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=kb(uid))

async def diag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        resp = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role":"system","content":"–û—Ç–≤–µ—Ç—å —Å–ª–æ–≤–æ–º 'ok'."},{"role":"user","content":"ping"}],
            temperature=0
        )
        await update.message.reply_text(f"OpenAI OK: {resp.choices[0].message.content.strip()}")
    except Exception as e:
        await update.message.reply_text(f"OpenAI ERROR: {type(e).__name__}: {e}")

# ===== MAIN =====
def main():
    threading.Thread(target=_run_health, daemon=True).start()
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.post_init = set_commands

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("subject", subject_cmd))
    app.add_handler(CommandHandler("grade", grade_cmd))
    app.add_handler(CommandHandler("parent", parent_cmd))
    app.add_handler(CommandHandler("essay", essay_cmd))
    app.add_handler(CommandHandler("explain", explain_cmd))
    app.add_handler(CommandHandler("diag", diag))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    log.info("Gotovo bot is running‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()

