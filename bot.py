import os, base64, logging, threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from collections import defaultdict
from telegram import Update, BotCommand, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import openai

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("gotovo-bot")

# ---------- –û–ö–†–£–ñ–ï–ù–ò–ï ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", "8080"))
if not TELEGRAM_TOKEN: raise SystemExit("–ù–µ—Ç TELEGRAM_TOKEN")
if not OPENAI_API_KEY: raise SystemExit("–ù–µ—Ç OPENAI_API_KEY")

client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)

# ---------- Health-check –¥–ª—è Fly ----------
class _Health(BaseHTTPRequestHandler):
    def do_GET(self): self.send_response(200); self.end_headers(); self.wfile.write(b"ok")
def _run_health(): HTTPServer(("0.0.0.0", PORT), _Health).serve_forever()

# ---------- –ü–ê–ú–Ø–¢–¨ ----------
SUBJECTS = {"–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞","—Ä—É—Å—Å–∫–∏–π","–∞–Ω–≥–ª–∏–π—Å–∫–∏–π","—Ñ–∏–∑–∏–∫–∞","—Ö–∏–º–∏—è","–∏—Å—Ç–æ—Ä–∏—è",
            "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ","–±–∏–æ–ª–æ–≥–∏—è","–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞","–≥–µ–æ–≥—Ä–∞—Ñ–∏—è","–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞","auto"}
USER_SUBJECT = defaultdict(lambda: "auto")
USER_GRADE   = defaultdict(lambda: "8")
PARENT_MODE  = defaultdict(lambda: False)
USER_STATE   = defaultdict(lambda: None)  # None | "AWAIT_EXPLAIN" | "AWAIT_ESSAY"

def kb(uid:int)->ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["üì∏ –§–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è", "üß† –û–±—ä—è—Å–Ω–∏—Ç—å", "üìù –°–æ—á–∏–Ω–µ–Ω–∏–µ"],
            [f"üìö –ü—Ä–µ–¥–º–µ—Ç: {USER_SUBJECT[uid]}", f"üéì –ö–ª–∞—Å—Å: {USER_GRADE[uid]}", f"üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç.: {'–≤–∫–ª' if PARENT_MODE[uid] else '–≤—ã–∫–ª'}"],
            ["üìã –ú–µ–Ω—é /menu", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
        ],
        resize_keyboard=True
    )

def sys_prompt(uid:int)->str:
    subject = USER_SUBJECT[uid]
    grade   = USER_GRADE[uid]
    parent  = PARENT_MODE[uid]
    base = ("–¢—ã ‚Äî –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä, –æ–±—ä—è—Å–Ω—è–π –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç: –ø—Ä–æ—Å—Ç–æ, –ø–æ —à–∞–≥–∞–º, —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∞–Ω–∞–ª–æ–≥–∏—è–º–∏. "
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: 1) –£—Å–ª–æ–≤–∏–µ (–∫—Ä–∞—Ç–∫–æ) ‚Üí 2) –†–µ—à–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º ‚Üí 3) –ö—Ä–∞—Ç–∫–æ (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). "
            "–î–æ–±–∞–≤–ª—è–π 1‚Äì2 –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞.")
    sub = f"–ü—Ä–µ–¥–º–µ—Ç: {subject}." if subject != "auto" else "–û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Å–∞–º –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é."
    grd = f"–ö–ª–∞—Å—Å: {grade}."
    par = "–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫—É—é –ø–∞–º—è—Ç–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π." if parent else ""
    return f"{base} {sub} {grd} {par}"

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def set_commands(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start","–ó–∞–ø—É—Å–∫"),
        BotCommand("menu","–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        BotCommand("help","–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"),
        BotCommand("subject","–ó–∞–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç (–∏–ª–∏ auto)"),
        BotCommand("grade","–ó–∞–¥–∞—Ç—å –∫–ª–∞—Å—Å 5‚Äì11"),
        BotCommand("parent","–†–µ–∂–∏–º –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π on/off"),
        BotCommand("essay","–°–æ—á–∏–Ω–µ–Ω–∏–µ: /essay –¢–ï–ú–ê"),
        BotCommand("explain","–û–±—ä—è—Å–Ω–∏—Ç—å: /explain –¢–ï–ö–°–¢"),
        BotCommand("diag","–ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI"),
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ì–æ—Ç–æ–≤–æ! –ü–æ–º–æ–≥–∞—é –ø–æ–Ω—è—Ç—å –î–ó. –ü–∏—à–∏ —Ç–µ–∫—Å—Ç, –∫–∏–¥–∞–π —Ñ–æ—Ç–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
        reply_markup=kb(uid)
    )

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await update.message.reply_text(
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî —è –æ–±—ä—è—Å–Ω—é.\n"
        "‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ —Ä–µ—à—É –ø–æ —à–∞–≥–∞–º.\n"
        "‚Ä¢ /essay –¢–ï–ú–ê ‚Äî —Å–æ—á–∏–Ω–µ–Ω–∏–µ 150‚Äì200 —Å–ª–æ–≤.\n"
        "‚Ä¢ /subject –ü–†–ï–î–ú–ï–¢|auto\n‚Ä¢ /grade 5‚Äì11\n‚Ä¢ /parent on|off",
        reply_markup=kb(uid)
    )

async def subject_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args: return await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω–æ: " + ", ".join(sorted(SUBJECTS)))
    val = " ".join(context.args).strip().lower()
    if val not in SUBJECTS: return await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –ø—Ä–µ–¥–º–µ—Ç. " + ", ".join(sorted(SUBJECTS)))
    USER_SUBJECT[uid] = val
    await update.message.reply_text(f"–ü—Ä–µ–¥–º–µ—Ç: {val}", reply_markup=kb(uid))

async def grade_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args or context.args[0] not in [str(i) for i in range(5,12)]:
        return await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /grade 7")
    USER_GRADE[uid] = context.args[0]
    await update.message.reply_text(f"–ö–ª–∞—Å—Å: {USER_GRADE[uid]}", reply_markup=kb(uid))

async def parent_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args or context.args[0].lower() not in {"on","off"}:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /parent on  –∏–ª–∏  /parent off")
    PARENT_MODE[uid] = (context.args[0].lower()=="on")
    await update.message.reply_text(f"–†–µ–∂–∏–º –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {'–≤–∫–ª' if PARENT_MODE[uid] else '–≤—ã–∫–ª'}", reply_markup=kb(uid))

# ---------- GPT-—Ö—ç–Ω–¥–ª–µ—Ä—ã ----------
async def gpt_explain(uid:int, prompt:str)->str:
    resp = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role":"system","content": sys_prompt(uid)},
            {"role":"user","content": f"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {prompt}"}
        ],
        temperature=0.3, max_tokens=900
    )
    return resp.choices[0].message.content.strip()

async def gpt_essay(uid:int, topic:str)->str:
    resp = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role":"system","content": sys_prompt(uid)},
            {"role":"user","content": f"–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ 150‚Äì200 —Å–ª–æ–≤. –¢–µ–º–∞: {topic}. –ü–∏—à–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫ {USER_GRADE[uid]} –∫–ª–∞—Å—Å–∞."}
        ],
        temperature=0.7, max_tokens=700
    )
    return resp.choices[0].message.content.strip()

async def explain_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = " ".join(context.args).strip()
    if not text: return await ask_explain(update, uid)
    try:
        await update.message.chat.send_action("typing")
        out = await gpt_explain(uid, text)
        await update.message.reply_text(out[:4000], reply_markup=kb(uid))
    except Exception as e:
        log.exception("explain"); await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=kb(uid))

async def essay_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    topic = " ".join(context.args).strip()
    if not topic: return await ask_essay(update, uid)
    try:
        await update.message.chat.send_action("typing")
        out = await gpt_essay(uid, topic)
        await update.message.reply_text(out[:4000], reply_markup=kb(uid))
    except Exception as e:
        log.exception("essay"); await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=kb(uid))

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    try:
        await update.message.chat.send_action("typing")
        file = await update.message.photo[-1].get_file()
        data = await file.download_as_bytearray()
        b64 = base64.b64encode(data).decode("utf-8")

        msgs = [
            {"role":"system","content": sys_prompt(uid)},
            {"role":"user","content":[
                {"type":"text","text":"–†–∞—Å–ø–æ–∑–Ω–∞–π –∑–∞–¥–∞–Ω–∏–µ —Å —Ñ–æ—Ç–æ (–∏—Å–ø—Ä–∞–≤—å OCR-–æ—à–∏–±–∫–∏ –ø–æ —Å–º—ã—Å–ª—É), —Ä–µ—à–∏ –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ —à–∞–≥–∞–º."},
                {"type":"image_url","image_url":{"url":f"data:image/jpeg;base64,{b64}"}}
            ]}
        ]
        resp = await client.chat.completions.create(model="gpt-4o", messages=msgs, temperature=0.2, max_tokens=1200)
        await update.message.reply_text(resp.choices[0].message.content.strip()[:4000], reply_markup=kb(uid))
    except Exception as e:
        log.exception("photo"); await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=kb(uid))

# ---------- –ö–Ω–æ–ø–∫–∏ –∏ ¬´—É–º–Ω—ã–π¬ª —Ç–µ–∫—Å—Ç ----------
async def ask_explain(update: Update, uid:int):
    USER_STATE[uid] = "AWAIT_EXPLAIN"
    await update.message.reply_text("üß† –ß—Ç–æ –æ–±—ä—è—Å–Ω–∏—Ç—å? –ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π.", reply_markup=kb(uid))

async def ask_essay(update: Update, uid:int):
    USER_STATE[uid] = "AWAIT_ESSAY"
    await update.message.reply_text("üìù –¢–µ–º–∞ —Å–æ—á–∏–Ω–µ–Ω–∏—è?", reply_markup=kb(uid))

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = (update.message.text or "").strip()

    # –ù–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
    if text == "üß† –û–±—ä—è—Å–Ω–∏—Ç—å":     return await ask_explain(update, uid)
    if text == "üìù –°–æ—á–∏–Ω–µ–Ω–∏–µ":     return await ask_essay(update, uid)
    if text == "üì∏ –§–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è":  return await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é.", reply_markup=kb(uid))
    if text.startswith("üìö –ü—Ä–µ–¥–º–µ—Ç:"): return await update.message.reply_text("–°–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π: /subject <–Ω–∞–∑–≤–∞–Ω–∏–µ|auto>", reply_markup=kb(uid))
    if text.startswith("üéì –ö–ª–∞—Å—Å:"):   return await update.message.reply_text("–°–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å –∫–æ–º–∞–Ω–¥–æ–π: /grade 5‚Äì11", reply_markup=kb(uid))
    if text.startswith("üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç.:"): return await update.message.reply_text("–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å: /parent on|off", reply_markup=kb(uid))
    if text in {"üìã –ú–µ–Ω—é /menu", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"}: return await help_cmd(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    state = USER_STATE[uid]
    if state == "AWAIT_EXPLAIN":
        USER_STATE[uid] = None
        return await explain_cmd(update, ContextTypes.DEFAULT_TYPE, )  # –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –Ω–∏–∂–µ —á–µ—Ä–µ–∑ ¬´–º–æ–ª—á–∞–ª–∏–≤—É—é¬ª –≤–µ—Ç–∫—É

    if state == "AWAIT_ESSAY":
        USER_STATE[uid] = None
        # –ø–æ–¥–º–µ–Ω–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º essay_cmd
        context.args = [text]
        return await essay_cmd(update, context)

    # –ú–æ–ª—á–∞–ª–∏–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ª—é–±–æ–µ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    context.args = [text]
    return await explain_cmd(update, context)

# ---------- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ----------
async def diag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        resp = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role":"system","content":"–û—Ç–≤–µ—Ç—å 'ok'."},{"role":"user","content":"ping"}],
            temperature=0
        )
        await update.message.reply_text(f"OpenAI OK: {resp.choices[0].message.content.strip()}")
    except Exception as e:
        await update.message.reply_text(f"OpenAI ERROR: {type(e).__name__}: {e}")

# ---------- MAIN ----------
def main():
    threading.Thread(target=_run_health, daemon=True).start()
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.post_init = set_commands

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu",  menu_cmd))
    app.add_handler(CommandHandler("help",  help_cmd))
    app.add_handler(CommandHandler("subject", subject_cmd))
    app.add_handler(CommandHandler("grade", grade_cmd))
    app.add_handler(CommandHandler("parent", parent_cmd))
    app.add_handler(CommandHandler("essay", essay_cmd))
    app.add_handler(CommandHandler("explain", explain_cmd))
    app.add_handler(CommandHandler("diag", diag))

    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    log.info("Gotovo bot is running‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
