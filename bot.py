import asyncio
import base64
import os
from io import BytesIO
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai

# === –¢–í–û–ò –ö–õ–Æ–ß–ò –ß–ï–†–ï–ó –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
async def set_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å"),
        BotCommand("help", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
        BotCommand("photo", "üì∑ –ö–∞–∫ –ø—Ä–∏—Å–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"),
        BotCommand("essay", "üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ"),
        BotCommand("explain", "üß† –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É"),
    ])

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî *–ì–æ—Ç–æ–≤–æ!* ü§ñ\n"
        "–¢–≤–æ–π –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å –¥–æ–º–∞—à–∫–æ–π.\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ –Ω—É–∂–Ω–æ:\n"
        "üì∑ –°—Ñ–æ—Ç–∫–∞–π –∑–∞–¥–∞–Ω–∏–µ\n"
        "üìù –ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ\n"
        "üß† –û–±—ä—è—Å–Ω–∏ —Ç–µ–º—É\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        parse_mode='Markdown'
    )

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí° –ö–∞–∫ —è –ø–æ–º–æ–≥—É:\n\n"
        "1Ô∏è‚É£ –ß—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äî –ø—Ä–∏—à–ª–∏ **—Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è**\n"
        "2Ô∏è‚É£ –ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ ‚Äî –Ω–∞–ø–∏—à–∏: `/essay —Ç–µ–º–∞`\n"
        "3Ô∏è‚É£ –ß—Ç–æ–±—ã –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É ‚Äî –Ω–∞–ø–∏—à–∏: `/explain —á—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ`\n\n"
        "–Ø –æ—Ç–≤–µ—á—É –±—ã—Å—Ç—Ä–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ ‚Äî –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç üòé"
        parse_mode='Markdown'
    )

# /photo
async def photo_hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì∏ –°—Ñ–æ—Ç–∫–∞–π –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–µ—Ç—Ä–∞–¥–∏ –∏–ª–∏ —É—á–µ–±–Ω–∏–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞.\n"
        "–Ø —Ä–µ—à—É –∏ –æ–±—ä—è—Å–Ω—é ‚Äî –∑–∞ 20 —Å–µ–∫—É–Ω–¥."
    )

# /essay
async def essay_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = " ".join(context.args)
    if not user_input:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/essay –°–º—ã—Å–ª —Ä–∞—Å—Å–∫–∞–∑–∞ '–ú—É–º—É'`", parse_mode='Markdown')
        return

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä. –ü–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ 150‚Äì200 —Å–ª–æ–≤, –∫–∞–∫ —à–∫–æ–ª—å–Ω–∏–∫ 8 –∫–ª–∞—Å—Å–∞. –ü—Ä–æ—Å—Ç–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –≤–æ–¥—ã."
                },
                {
                    "role": "user",
                    "content": f"–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É: {user_input}"
                }
            ],
            max_tokens=500
        )
        essay = response.choices[0].message.content
        await update.message.reply_text(essay)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# /explain
async def explain_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = " ".join(context.args)
    if not user_input:
        await update.message.reply_text("–ß—Ç–æ –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä:\n`/explain –∫–∞–∫ —Ä–µ—à–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è`", parse_mode='Markdown')
        return

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä. –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ, –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç. –ë–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤. –° –ø—Ä–∏–º–µ—Ä–æ–º –∏–∑ –∂–∏–∑–Ω–∏."
                },
                {
                    "role": "user",
                    "content": f"–û–±—ä—è—Å–Ω–∏, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –º–Ω–µ 14 –ª–µ—Ç: {user_input}"
                }
            ],
            max_tokens=700
        )
        explanation = response.choices[0].message.content
        await update.message.reply_text(explanation)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞–Ω–∏–µ...")

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo_file = await update.message.photo[-1].get_file()
    image_bytes = await photo_file.download_as_bytearray()
    image_base64 = base64.b64encode(image_bytes).decode('utf-8')

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT-4o
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": (
                                "–¢—ã ‚Äî –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–∞. "
                                "–û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ, –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç. "
                                "–†–µ—à–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ —à–∞–≥–∞–º. "
                                "–ï—Å–ª–∏ —ç—Ç–æ —Å–æ—á–∏–Ω–µ–Ω–∏–µ ‚Äî –Ω–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –Ω–∞ 150 —Å–ª–æ–≤. "
                                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã. "
                                "–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å: üí° –°–æ–≤–µ—Ç: ..."
                            ),
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{image_base64}"
                            },
                        },
                    ],
                }
            ],
            max_tokens=1000,
        )
        ai_response = response.choices[0].message.content
        await update.message.reply_text(ai_response)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ó–∞–ø—É—Å–∫
def main():
    print("üöÄ –ë–æ—Ç '–ì–æ—Ç–æ–≤–æ!' –∑–∞–ø—É—â–µ–Ω –≤ –æ–±–ª–∞–∫–µ!")
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.post_init = set_commands

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("photo", photo_hint))
    app.add_handler(CommandHandler("essay", essay_command))
    app.add_handler(CommandHandler("explain", explain_command))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    app.run_polling()

if __name__ == '__main__':
    main()
