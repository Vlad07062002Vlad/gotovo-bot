import os, base64, asyncio, logging, threading
from io import BytesIO
from http.server import BaseHTTPRequestHandler, HTTPServer

from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

import openai

# ===== –õ–û–ì–ò =====
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("gotovo-bot")

# ===== –û–ö–†–£–ñ–ï–ù–ò–ï =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", "8080"))

if not TELEGRAM_TOKEN:
    raise SystemExit("–ù–µ—Ç TELEGRAM_TOKEN (flyctl secrets set TELEGRAM_TOKEN=...)")
if not OPENAI_API_KEY:
    raise SystemExit("–ù–µ—Ç OPENAI_API_KEY (flyctl secrets set OPENAI_API_KEY=...)")

# OpenAI client
client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)

# ===== Health-check –¥–ª—è Fly =====
class _Health(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200); self.end_headers(); self.wfile.write(b"ok")

def _run_health():
    HTTPServer(("0.0.0.0", PORT), _Health).serve_forever()

# ===== –ö–æ–º–∞–Ω–¥—ã =====
async def set_commands(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start",   "üöÄ –ù–∞—á–∞—Ç—å"),
        BotCommand("help",    "‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
        BotCommand("photo",   "üì∑ –ö–∞–∫ –ø—Ä–∏—Å–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"),
        BotCommand("essay",   "üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ"),
        BotCommand("explain", "üß† –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É"),
        BotCommand("diag",    "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI"),
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî *–ì–æ—Ç–æ–≤–æ!* ü§ñ\n"
        "–°—Ñ–æ—Ç–∫–∞–π –∑–∞–¥–∞–Ω–∏–µ ‚Äî —Ä–µ—à—É –∏ –æ–±—ä—è—Å–Ω—é. –ò–ª–∏:\n"
        "‚Ä¢ /essay –¢–ï–ú–ê\n"
        "‚Ä¢ /explain –í–û–ü–†–û–°\n",
        parse_mode="Markdown"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–∞–∫ —è –ø–æ–º–æ–≥–∞—é:\n"
        "1) –ü—Ä–∏—à–ª–∏ *—Ñ–æ—Ç–æ* –∑–∞–¥–∞–Ω–∏—è ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ–±—ä—è—Å–Ω—é –ø–æ —à–∞–≥–∞–º.\n"
        "2) /essay —Ç–µ–º–∞ ‚Äî —Å–æ—á–∏–Ω–µ–Ω–∏–µ 150‚Äì200 —Å–ª–æ–≤.\n"
        "3) /explain —á—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –æ–±—ä—è—Å–Ω—é –ø—Ä–æ—Å—Ç–æ.\n"
        "–¶–µ–ª—å ‚Äî –ü–û–ù–Ø–¢–¨, –∞ –Ω–µ —Å–ø–∏—Å–∞—Ç—å üòâ", parse_mode="Markdown"
    )

async def photo_hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì∏ –°—Ñ–æ—Ç–∫–∞–π –∑–∞–¥–∞–Ω–∏–µ –∏ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞. –Ø —Ä–∞–∑–±–µ—Ä—É –∏ –æ–±—ä—è—Å–Ω—é –ø–æ —à–∞–≥–∞–º.")

async def essay_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic = " ".join(context.args).strip()
    if not topic:
        return await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É: `/essay –°–º—ã—Å–ª —Ä–∞—Å—Å–∫–∞–∑–∞ '–ú—É–º—É'`", parse_mode="Markdown")
    try:
        await update.message.chat.send_action("typing")
        resp = await client.chat.completions.create(
            model="gpt-4o",  # –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ vision
            messages=[
                {"role":"system","content":"–¢—ã –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä. –ü–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ 150‚Äì200 —Å–ª–æ–≤, –∫–∞–∫ —É—á–µ–Ω–∏–∫ 8 –∫–ª–∞—Å—Å–∞. –ü—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫."},
                {"role":"user","content":f"–¢–µ–º–∞ —Å–æ—á–∏–Ω–µ–Ω–∏—è: {topic}"}
            ],
            temperature=0.7,
            max_tokens=600
        )
        await update.message.reply_text(resp.choices[0].message.content.strip()[:4000])
    except Exception as e:
        log.exception("essay")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def explain_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = " ".join(context.args).strip()
    if not text:
        return await update.message.reply_text("–ß—Ç–æ –æ–±—ä—è—Å–Ω–∏—Ç—å? –ü—Ä–∏–º–µ—Ä: `/explain –∫–∞–∫ —Ä–µ—à–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è`", parse_mode="Markdown")
    try:
        await update.message.chat.send_action("typing")
        resp = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role":"system","content":"–û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ, –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç. –ü–æ —à–∞–≥–∞–º. –î–∞–π –±—ã—Ç–æ–≤—É—é –∞–Ω–∞–ª–æ–≥–∏—é –∏ –º–∏–Ω–∏-–ø—Ä–∏–º–µ—Ä."},
                {"role":"user","content":f"–û–±—ä—è—Å–Ω–∏ –¥–ª—è 8 –∫–ª–∞—Å—Å–∞: {text}"}
            ],
            temperature=0.3,
            max_tokens=800
        )
        await update.message.reply_text(resp.choices[0].message.content.strip()[:4000])
    except Exception as e:
        log.exception("explain")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞–Ω–∏–µ‚Ä¶")
        f = await update.message.photo[-1].get_file()
        data = await f.download_as_bytearray()
        b64 = base64.b64encode(data).decode("utf-8")

        messages = [
            {"role":"system","content":"–¢—ã –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä. –†–∞—Å–ø–æ–∑–Ω–∞–π —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ, –∏—Å–ø—Ä–∞–≤—å OCR-–æ—à–∏–±–∫–∏ –ø–æ —Å–º—ã—Å–ª—É. –†–µ—à–∏ –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ —à–∞–≥–∞–º. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å 'üí° –°–æ–≤–µ—Ç: ...'."},
            {"role":"user","content":[
                {"type":"text","text":"–†–µ—à–∏ –∑–∞–¥–∞–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –æ–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç–æ."},
                {"type":"image_url","image_url":{"url":f"data:image/jpeg;base64,{b64}"}}
            ]}
        ]
        resp = await client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.2,
            max_tokens=1200
        )
        await update.message.reply_text(resp.choices[0].message.content.strip()[:4000])
    except Exception as e:
        log.exception("photo")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def diag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        resp = await client.chat.completions.create(
            model="gpt-4o", messages=[
                {"role":"system","content":"–û—Ç–≤–µ—Ç—å 'ok'"},
                {"role":"user","content":"ping"}
            ], temperature=0
        )
        await update.message.reply_text(f"OpenAI OK: {resp.choices[0].message.content.strip()}")
    except Exception as e:
        await update.message.reply_text(f"OpenAI ERROR: {type(e).__name__}: {e}")

def main():
    threading.Thread(target=_run_health, daemon=True).start()
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.post_init = set_commands

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("photo", photo_hint))
    app.add_handler(CommandHandler("essay", essay_command))
    app.add_handler(CommandHandler("explain", explain_command))
    app.add_handler(CommandHandler("diag", diag))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    log.info("Bot is running‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()

