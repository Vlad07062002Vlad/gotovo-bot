import os, io, base64, logging, threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from collections import defaultdict

from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

import openai  # <-- —Ç–∞–∫ –Ω–∞–¥—ë–∂–Ω–µ–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –ø–∞–∫–µ—Ç–∞

# ===== –õ–û–ì–ò =====
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("umnik-mvp")

# ===== –û–ö–†–£–ñ–ï–ù–ò–ï =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", "8080"))

if not TELEGRAM_TOKEN:
    raise SystemExit("–ù–µ—Ç TELEGRAM_TOKEN (–∑–∞–¥–∞–π: flyctl secrets set TELEGRAM_TOKEN=...)")
if not OPENAI_API_KEY:
    raise SystemExit("–ù–µ—Ç OPENAI_API_KEY (–∑–∞–¥–∞–π: flyctl secrets set OPENAI_API_KEY=...)")

# ===== OpenAI =====
client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)

# ===== Health-check HTTP –¥–ª—è Fly =====
class _Health(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200); self.end_headers(); self.wfile.write(b"ok")

def _run_health():
    HTTPServer(("0.0.0.0", PORT), _Health).serve_forever()

# ===== –ü–∞–º—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ (RAM) =====
USER_MODE = defaultdict(lambda: "–ì–æ—Ç–æ–≤–æ")  # "–û–±—É—á–µ–Ω–∏–µ" | "–ü–æ–¥—Å–∫–∞–∑–∫–∞" | "–ì–æ—Ç–æ–≤–æ"

def mode_hint(mode: str) -> str:
    return {
        "–û–±—É—á–µ–Ω–∏–µ": "–ó–∞–¥–∞–≤–∞–π 2‚Äì3 –Ω–∞–≤–æ–¥—è—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, –Ω–æ –≤—Å—ë –∂–µ –ø—Ä–∏–≤–µ–¥–∏ –≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞": "–î–∞–π 3‚Äì5 –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏ –∫–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.",
        "–ì–æ—Ç–æ–≤–æ":   "–î–∞–π –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ."
    }.get(mode, "–î–∞–π –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.")

# ===== –ö–æ–º–∞–Ω–¥—ã =====
async def set_commands(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
        BotCommand("help", "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"),
        BotCommand("mode", "–†–µ–∂–∏–º: –û–±—É—á–µ–Ω–∏–µ/–ü–æ–¥—Å–∫–∞–∑–∫–∞/–ì–æ—Ç–æ–≤–æ"),
        BotCommand("solve", "–†–µ—à–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: /solve –¢–ï–ö–°–¢"),
        BotCommand("diag", "–ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI"),
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = USER_MODE[update.effective_user.id]
    await update.message.reply_text(
        "üëã –Ø ¬´–£–º–Ω–∏–∫¬ª (MVP):\n"
        "‚Ä¢ –°—Ñ–æ—Ç–∫–∞–π –∑–∞–¥–∞–Ω–∏–µ ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ–±—ä—è—Å–Ω—é –ø–æ —à–∞–≥–∞–º.\n"
        "‚Ä¢ –ò–ª–∏ /solve –¢–ï–ö–°–¢ ‚Äî —Ä–µ—à—É —Ç–µ–∫—Å—Ç–æ–º.\n"
        "‚Ä¢ /mode –û–±—É—á–µ–Ω–∏–µ|–ü–æ–¥—Å–∫–∞–∑–∫–∞|–ì–æ—Ç–æ–≤–æ ‚Äî —Ñ–æ—Ä–º–∞—Ç –ø–æ–º–æ—â–∏.\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *{m}*.",
        parse_mode="Markdown"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1) –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ–±—ä—è—Å–Ω—é.\n"
        "2) /solve –¢–ï–ö–°–¢ ‚Äî —Ä–µ—à—É —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n"
        "3) /mode –û–±—É—á–µ–Ω–∏–µ|–ü–æ–¥—Å–∫–∞–∑–∫–∞|–ì–æ—Ç–æ–≤–æ ‚Äî –≤—ã–±–µ—Ä–∏ –≥–ª—É–±–∏–Ω—É –ø–æ–º–æ—â–∏.\n"
        "–¶–µ–ª—å ‚Äî –ø–æ–Ω—è—Ç—å, –∞ –Ω–µ —Å–ø–∏—Å–∞—Ç—å üòâ"
    )

async def mode_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        return await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {USER_MODE[uid]}. –ü—Ä–∏–º–µ—Ä: /mode –ü–æ–¥—Å–∫–∞–∑–∫–∞")
    val = " ".join(context.args).strip().capitalize()
    if val not in ("–û–±—É—á–µ–Ω–∏–µ", "–ü–æ–¥—Å–∫–∞–∑–∫–∞", "–ì–æ—Ç–æ–≤–æ"):
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω–æ: –û–±—É—á–µ–Ω–∏–µ / –ü–æ–¥—Å–∫–∞–∑–∫–∞ / –ì–æ—Ç–æ–≤–æ")
    USER_MODE[uid] = val
    await update.message.reply_text(f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {val}")

# ===== –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ =====
async def diag_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        resp = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: ok"},
                {"role": "user", "content": "ping"}
            ],
            temperature=0
        )
        await update.message.reply_text(f"OpenAI OK: {resp.choices[0].message.content.strip()}")
    except Exception as e:
        log.exception("diag")
        await update.message.reply_text(f"OpenAI ERROR: {type(e).__name__}: {e}")

# ===== –†–µ—à–µ–Ω–∏–µ –¢–ï–ö–°–¢–û–ú =====
async def solve_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = " ".join(context.args).strip()
    if not text:
        return await update.message.reply_text("–î–∞–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è: /solve –ù–∞–π–¥–∏—Ç–µ –∫–æ—Ä–µ–Ω—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è ...")
    mode = USER_MODE[uid]
    sys = (
        "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ (–§–ì–û–°, 5‚Äì11 –∫–ª–∞—Å—Å). –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ, –ø–æ —à–∞–≥–∞–º, —Å –±—ã—Ç–æ–≤—ã–º–∏ –∞–Ω–∞–ª–æ–≥–∏—è–º–∏. "
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –£—Å–ª–æ–≤–∏–µ (–∫—Ä–∞—Ç–∫–æ) ‚Üí –†–µ—à–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º ‚Üí –ö—Ä–∞—Ç–∫–æ (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) ‚Üí 1‚Äì2 –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞."
    )
    user = f"–†–µ–∂–∏–º: {mode}. {mode_hint(mode)}\n–ó–∞–¥–∞–Ω–∏–µ:\n{text}"
    try:
        resp = await client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.2,
            messages=[{"role": "system", "content": sys}, {"role": "user", "content": user}]
        )
        out = resp.choices[0].message.content.strip()
        await update.message.reply_text(out[:4000])
    except Exception as e:
        log.exception("solve_cmd")
        await update.message.reply_text(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ—à–∏—Ç—å: {e}")

# ===== –†–µ—à–µ–Ω–∏–µ –° –§–û–¢–û =====
async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    mode = USER_MODE[uid]
    try:
        photo = update.message.photo[-1]
        f = await context.bot.get_file(photo.file_id)
        bio = io.BytesIO()
        await f.download_to_memory(out=bio)
        b64 = base64.b64encode(bio.getvalue()).decode("ascii")

        messages = [
            {"role": "system", "content":
             "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ (–§–ì–û–°, 5‚Äì11 –∫–ª–∞—Å—Å). –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ —à–∞–≥–∞–º, "
             "–±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–∞ —Ç–µ—Ä–º–∏–Ω–∞–º–∏, –¥–æ–±–∞–≤–ª—è–π –∞–Ω–∞–ª–æ–≥–∏–∏."},
            {"role": "user", "content": [
                {"type": "text", "text": f"–†–µ–∂–∏–º: {mode}. {mode_hint(mode)}\n"
                                         "1) –†–∞—Å–ø–æ–∑–Ω–∞–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è (–∏—Å–ø—Ä–∞–≤—å OCR-–æ—à–∏–±–∫–∏ –ø–æ —Å–º—ã—Å–ª—É).\n"
                                         "2) –†–µ—à–∏ –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ —à–∞–≥–∞–º.\n"
                                         "3) –í –∫–æ–Ω—Ü–µ ‚Äî –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ 1‚Äì2 –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞."},
                {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{b64}"}}
            ]}
        ]

        resp = await client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.2,
            messages=messages
        )
        out = resp.choices[0].message.content.strip()
        await update.message.reply_text(out[:4000])
    except Exception as e:
        log.exception("photo_handler")
        await update.message.reply_text(f"–ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ: {e}")

# ===== main =====
def main():
    threading.Thread(target=_run_health, daemon=True).start()

    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.post_init = set_commands

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("mode", mode_cmd))
    app.add_handler(CommandHandler("solve", solve_cmd))
    app.add_handler(CommandHandler("diag", diag_cmd))
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))

    log.info("Umnik MVP is running‚Ä¶")
    # –ë–ï–ó allowed_updates ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –≤–∞–ª–∏—Ç—å –∑–∞–ø—É—Å–∫ –Ω–∞ v21
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
