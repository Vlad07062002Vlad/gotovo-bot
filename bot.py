import os
import io
import re
import html
import logging
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from collections import defaultdict

from telegram import Update, BotCommand, ReplyKeyboardMarkup
from telegram.constants import ChatAction
from telegram.error import BadRequest
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters as f
from openai import AsyncOpenAI

from PIL import Image, ImageOps, ImageFilter, ImageEnhance
import pytesseract
from pytesseract import TesseractError

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("gotovo-bot")

# ---------- –û–ö–†–£–ñ–ï–ù–ò–ï ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", "8080"))

# OCR –∫–æ–Ω—Ñ–∏–≥–∏/—è–∑—ã–∫–∏ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ env)
TESS_LANGS_DEFAULT = "rus+bel+eng+deu+fra"
TESS_LANGS = os.getenv("TESS_LANGS", TESS_LANGS_DEFAULT)
TESS_CONFIG = os.getenv("TESS_CONFIG", "--oem 3 --psm 6 -c preserve_interword_spaces=1")

if not TELEGRAM_TOKEN:
    raise SystemExit("–ù–µ—Ç TELEGRAM_TOKEN (flyctl secrets set TELEGRAM_TOKEN=...)")
if not OPENAI_API_KEY:
    raise SystemExit("–ù–µ—Ç OPENAI_API_KEY (flyctl secrets set OPENAI_API_KEY=...)")

client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# ---------- Health-check –¥–ª—è Fly ----------
class _Health(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"ok")

def _run_health():
    HTTPServer(("0.0.0.0", PORT), _Health).serve_forever()

# ---------- –ü–ê–ú–Ø–¢–¨ (RAM) ----------
SUBJECTS = {
    "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è",
    "–∏—Å—Ç–æ—Ä–∏—è", "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–±–∏–æ–ª–æ–≥–∏—è", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "auto",
    "–±–µ–ª–∞—Ä—É—Å–∫–∞—è –º–æ–≤–∞", "–±–µ–ª–∞—Ä—É—Å–∫–∞—è –ª—ñ—Ç–∞—Ä–∞—Ç—É—Ä–∞"
}
USER_SUBJECT = defaultdict(lambda: "auto")
USER_GRADE = defaultdict(lambda: "8")
PARENT_MODE = defaultdict(lambda: False)
USER_STATE = defaultdict(lambda: None)  # None | "AWAIT_EXPLAIN" | "AWAIT_ESSAY" | "AWAIT_FOLLOWUP" | "AWAIT_TEXT_OR_PHOTO_CHOICE"
USER_LANG = defaultdict(lambda: "ru")   # 'ru' | 'be' | 'en' | 'de' | 'fr'

def kb(uid: int) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["üì∏ –§–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è", "üß† –û–±—ä—è—Å–Ω–∏—Ç—å", "üìù –°–æ—á–∏–Ω–µ–Ω–∏–µ"],
            [f"üìö –ü—Ä–µ–¥–º–µ—Ç: {USER_SUBJECT[uid]}", f"üéì –ö–ª–∞—Å—Å: {USER_GRADE[uid]}", f"üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç.: {'–≤–∫–ª' if PARENT_MODE[uid] else '–≤—ã–∫–ª'}"],
            ["üìã –ú–µ–Ω—é /menu", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
        ],
        resize_keyboard=True
    )

# ---------- –ù–ê–î–Å–ñ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê HTML ----------
ALLOWED_TAGS = {"b", "i", "code", "pre"}  # <a> –∏—Å–∫–ª—é—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å Telegram-–æ—à–∏–±–∫–∏
# –≤–∞–∂–Ω–æ: –∏—â–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –≤ —É–∂–µ-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
_TAG_OPEN = {t: f"&lt;{t}&gt;" for t in ALLOWED_TAGS}
_TAG_CLOSE = {t: f"&lt;/{t}&gt;" for t in ALLOWED_TAGS}

def sanitize_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å—ë –∏ —Ç–æ—á–µ—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ <b>, <i>, <code>, <pre>."""
    if not text:
        return ""
    text = text.replace("\x00", "").replace("\r\n", "\n").replace("\r", "\n")
    text = re.sub(r"<\s*br\s*/?\s*>", "\n", text, flags=re.I)
    escaped = html.escape(text, quote=False)
    for t in ALLOWED_TAGS:
        escaped = re.sub(
            fr"{_TAG_OPEN[t]}(.*?){_TAG_CLOSE[t]}",
            fr"<{t}>\1</{t}>",
            escaped,
            flags=re.IGNORECASE | re.DOTALL,
        )
    return escaped[:4000]

async def safe_reply_html(message, text: str, **kwargs):
    """–ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ HTML; –ø—Ä–∏ –æ—à–∏–±–∫–µ Telegram —à–ª—ë–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."""
    try:
        return await message.reply_text(
            sanitize_html(text),
            parse_mode="HTML",
            disable_web_page_preview=True,
            **kwargs
        )
    except BadRequest as e:
        if "Can't parse entities" in str(e):
            return await message.reply_text(
                html.escape(text)[:4000],
                disable_web_page_preview=True,
                **kwargs
            )
        raise

# ---------- –Ø–ó–´–ö –í–í–û–î–ê ----------
def detect_lang(text: str) -> str:
    """–≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∑–∞–¥–∞–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º/–¥–∏–∞–∫—Ä–∏—Ç–∏–∫–µ."""
    t = (text or "")
    tl = t.lower()

    # –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π
    if "—û" in tl or (tl.count("—ñ") >= 2 and tl.count("–∏") == 0):
        return "be"
    # –Ω–µ–º–µ—Ü–∫–∏–π
    if any(ch in tl for ch in ("√§", "√∂", "√º", "√ü")):
        return "de"
    # —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
    if any(ch in tl for ch in ("√†","√¢","√§","√ß","√©","√®","√™","√´","√Æ","√Ø","√¥","√∂","√π","√ª","√º","√ø","≈ì")):
        return "fr"
    # –ª–∞—Ç–∏–Ω–∏—Ü–∞ –±–µ–∑ —è–≤–Ω—ã—Ö —Ñ—Ä/–Ω–µ–º ‚Üí –∞–Ω–≥–ª
    cyr = sum('–∞' <= ch <= '—è' or '–ê' <= ch <= '–Ø' or ch in '—ë–Å' for ch in t)
    lat = sum('a' <= ch.lower() <= 'z' for ch in t)
    if lat > cyr * 1.2:
        return "en"
    return "ru"

# ---------- –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ ----------
def sys_prompt(uid: int) -> str:
    subject = USER_SUBJECT[uid]
    grade = USER_GRADE[uid]
    parent = PARENT_MODE[uid]

    base = (
        "–¢—ã ‚Äî —à–∫–æ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨ –î/–ó. "
        "–í—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏–µ –ü–û–õ–ù–û–°–¢–¨–Æ: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–¥–∞–π <b>–û—Ç–≤–µ—Ç—ã</b> –ø–æ –ø—É–Ω–∫—Ç–∞–º (–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏, –≥–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤, "
        "—á–∏—Å–ª–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Ç.–ø.), –∑–∞—Ç–µ–º –∫—Ä–∞—Ç–∫–æ–µ <b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ</b> –ü–û-–†–£–°–°–ö–ò, –ø–æ —à–∞–≥–∞–º. "
        "–ï—Å–ª–∏ –≤ –∑–∞–¥–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ ¬´–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å/—Ä–∞—Å–∫—Ä–∞—Å–∏—Ç—å/—Å–æ–µ–¥–∏–Ω–∏—Ç—å —Å—Ç—Ä–µ–ª–∫–∞–º–∏¬ª, –æ—Ç–¥–∞–π —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "
        "¬´—Å–ª–æ–≤–æ ‚Äî 1-–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ [—Å–∏–Ω–∏–π]¬ª, ¬´—Å–æ–æ—Ç–Ω–µ—Å—Ç–∏: –ê‚Üí1, –ë‚Üí3¬ª). "
        "–ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π ‚Äî –æ—Ñ–æ—Ä–º–∏ –∫–∞–∫ <b>–ó–∞–¥–∞–Ω–∏–µ 1</b>, <b>–ó–∞–¥–∞–Ω–∏–µ 2</b>‚Ä¶ "
        "–ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û HTML-—Ç–µ–≥–∏ <b>, <i>, <code>, <pre>. –ë–µ–∑ Markdown."
    )
    sub = f"–ü—Ä–µ–¥–º–µ—Ç: {subject}." if subject != "auto" else "–û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Å–∞–º."
    grd = f"–ö–ª–∞—Å—Å: {grade}."
    par = (
        "<b>–ü–∞–º—è—Ç–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:</b><br>"
        "1) –ö–∞–∫–∞—è —Ç–µ–º–∞ –∏–∑—É—á–∞–µ—Ç—Å—è.<br>"
        "2) –ß—Ç–æ –≤–∞–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É —Ä–µ–±—ë–Ω–∫–∞.<br>"
        "3) –ö–∞–∫ –º—è–≥–∫–æ –ø–æ–º–æ—á—å, –µ—Å–ª–∏ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç."
    ) if parent else ""
    return f"{base} {sub} {grd} {par}"

# ---------- –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ü–†–ï–î–ú–ï–¢–ê ----------
async def classify_subject(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –ø–æ —Ç–µ–∫—Å—Ç—É –∑–∞–¥–∞–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ –∏–∑ SUBJECTS (–∏–ª–∏ 'auto')."""
    try:
        choices = ", ".join(sorted(SUBJECTS - {"auto"}))
        prompt = (
            "–ö –∫–∞–∫–æ–º—É —à–∫–æ–ª—å–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ? "
            f"–í—ã–±–µ—Ä–∏ —Ä–æ–≤–Ω–æ –û–î–ù–û –∏–∑ —Å–ø–∏—Å–∫–∞: {choices}. "
            "–ï—Å–ª–∏ –Ω–µ –æ—á–µ–≤–∏–¥–Ω–æ ‚Äî –æ—Ç–≤–µ—Ç—å ¬´auto¬ª. "
            "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.\n\n"
            f"–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n{text[:3000]}"
        )
        resp = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ 'auto'."},
                {"role": "user", "content": prompt}
            ],
            temperature=0,
            max_tokens=10,
        )
        ans = (resp.choices[0].message.content or "").strip().lower()
        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        mapping = {
            "–±–µ–ª–∞—Ä—É—Å–∫–∞—è –º–æ–≤–∞": "–±–µ–ª–∞—Ä—É—Å–∫–∞—è –º–æ–≤–∞",
            "–±–µ–ª–∞—Ä—É—Å–∫–∞—è –ª—ñ—Ç–∞—Ä–∞—Ç—É—Ä–∞": "–±–µ–ª–∞—Ä—É—Å–∫–∞—è –ª—ñ—Ç–∞—Ä–∞—Ç—É—Ä–∞",
            "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫": "—Ä—É—Å—Å–∫–∏–π",
            "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
            "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
            "—Ñ–∏–∑–∏–∫–∞": "—Ñ–∏–∑–∏–∫–∞",
            "—Ö–∏–º–∏—è": "—Ö–∏–º–∏—è",
            "–∏—Å—Ç–æ—Ä–∏—è": "–∏—Å—Ç–æ—Ä–∏—è",
            "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ": "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
            "–±–∏–æ–ª–æ–≥–∏—è": "–±–∏–æ–ª–æ–≥–∏—è",
            "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è": "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è",
            "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
            "auto": "auto",
        }
        # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∫–ª—é—á–∞–º
        for k, v in mapping.items():
            if ans == k:
                return v if v in SUBJECTS else "auto"
        # –∏–Ω–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å ¬´—Ä—É—Å—Å–∫–∏–π¬ª ‚Äî —ç—Ç–æ –æ–∫
        return ans if ans in SUBJECTS else "auto"
    except Exception as e:
        log.warning(f"classify_subject failed: {e}")
        return "auto"

# ---------- OCR: –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å –∏ –∫–∞—Å–∫–∞–¥ —è–∑—ã–∫–æ–≤ ----------
def _preprocess_image(img: Image.Image) -> Image.Image:
    # –∞–≤—Ç–æ–ø–æ–≤–æ—Ä–æ—Ç –ø–æ EXIF
    img = ImageOps.exif_transpose(img)
    # –∫ —á/–± + –∞–≤—Ç–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç
    img = img.convert("L")
    img = ImageOps.autocontrast(img)
    # —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ/—Ä–µ–∑–∫–æ—Å—Ç—å
    img = img.filter(ImageFilter.MedianFilter(size=3))
    img = ImageEnhance.Sharpness(img).enhance(1.25)
    # –ª—ë–≥–∫–∏–π UnsharpMask –¥–ª—è –º–µ–ª–∫–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
    img = img.filter(ImageFilter.UnsharpMask(radius=2, percent=125, threshold=3))
    # –∞–ø—Å–∫–µ–π–ª –¥–ª—è –º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    max_w = 1800
    if img.width < max_w:
        scale = min(max_w / img.width, 3.0)
        img = img.resize((int(img.width * scale), int(img.height * scale)), Image.LANCZOS)
    return img

def _ocr_with_langs(img: Image.Image, langs_list) -> str:
    """–ü—Ä–æ–±—É–µ–º —è–∑—ã–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ."""
    for langs in langs_list:
        try:
            txt = pytesseract.image_to_string(img, lang=langs, config=TESS_CONFIG)
            if txt and txt.strip():
                log.info(f"OCR success with langs='{langs}': {repr(txt[:80])}")
                return txt.strip()
        except TesseractError as e:
            log.warning(f"OCR langs='{langs}' failed: {e}")
            continue
    return ""

def ocr_image(img: Image.Image) -> str:
    # –±–∞–∑–æ–≤—ã–π –ø–æ–≤–æ—Ä–æ—Ç –ø–æ EXIF
    base = ImageOps.exif_transpose(img)

    # —Ü–µ–ø–æ—á–∫–∞ —è–∑—ã–∫–æ–≤: env ‚Üí rus+bel+eng+deu+fra ‚Üí rus+eng ‚Üí rus ‚Üí bel ‚Üí deu ‚Üí fra ‚Üí eng
    langs_chain = []
    if TESS_LANGS:
        langs_chain.append(TESS_LANGS)
    for l in ("rus+bel+eng+deu+fra", "rus+eng", "rus", "bel", "deu", "fra", "eng"):
        if l not in langs_chain:
            langs_chain.append(l)

    # –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–≥–æ–ª —á–µ—Ä–µ–∑ OSD (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    angles = []
    try:
        osd = pytesseract.image_to_osd(base, config="--psm 0")
        m = re.search(r"(?:Rotate|Orientation in degrees):\s*(\d+)", osd)
        if m:
            angles.append(int(m.group(1)) % 360)
    except TesseractError as e:
        log.warning(f"OSD failed: {e}")

    # –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º 0/90/180/270, –Ω–∞—á–∏–Ω–∞—è —Å —É–≥–ª–∞ –∏–∑ OSD (–µ—Å–ª–∏ –±—ã–ª)
    tried = set()
    for a in angles + [0, 90, 180, 270]:
        a %= 360
        if a in tried:
            continue
        tried.add(a)
        rot = base.rotate(-a, expand=True)        # –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º ¬´–≤ –Ω–æ–ª—å¬ª
        pimg = _preprocess_image(rot)             # –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å
        txt = _ocr_with_langs(pimg, langs_chain)  # –∫–∞—Å–∫–∞–¥ —è–∑—ã–∫–æ–≤
        if txt and txt.strip():
            log.info(f"OCR best_angle={a} len={len(txt)}")
            return txt.strip()

    # –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å ‚Äî –±–µ–∑ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É–≥–ª–∞—Ö
    for a in (0, 90, 180, 270):
        if a in tried:
            continue
        rot = base.rotate(-a, expand=True)
        txt = _ocr_with_langs(rot, ["rus+eng", "rus", "eng", "deu", "fra"])
        if txt and txt.strip():
            log.info(f"OCR fallback_angle={a} len={len(txt)}")
            return txt.strip()

    return ""

# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def set_commands(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å–∫"),
        BotCommand("menu", "–ú–µ–Ω—é"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
        BotCommand("subject", "–ü—Ä–µ–¥–º–µ—Ç (–∏–ª–∏ auto)"),
        BotCommand("grade", "–ö–ª–∞—Å—Å 5‚Äì11"),
        BotCommand("parent", "–†–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π on/off"),
        BotCommand("essay", "–°–æ—á–∏–Ω–µ–Ω–∏–µ: /essay –¢–ï–ú–ê"),
        BotCommand("explain", "–û–±—ä—è—Å–Ω–∏—Ç—å: /explain –¢–ï–ö–°–¢"),
        BotCommand("about", "–û –±–æ—Ç–µ –∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"),
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await safe_reply_html(
        update.message,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>–ì–æ—Ç–æ–≤–æ!</b> –ü–æ–º–æ–≥–∞—é –ø–æ–Ω—è—Ç—å –î–ó.\n"
        "–ü–∏—à–∏ —Ç–µ–∫—Å—Ç, –∫–∏–¥–∞–π —Ñ–æ—Ç–æ –∏–ª–∏ –∂–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=kb(uid)
    )

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await about_cmd(update, context)

async def about_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_reply_html(
        update.message,
        "<b>üìò –û –±–æ—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ!¬ª</b>\n\n"
        "–Ø ‚Äî —à–∫–æ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å –¥–æ–º–∞—à–∫–æ–π, "
        "–æ–±—ä—è—Å–Ω—è—è –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç: –ø—Ä–æ—Å—Ç–æ, –ø–æ —à–∞–≥–∞–º, –±–µ–∑ –≤–æ–¥—ã.\n\n"
        "<b>üéØ –ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚Ä¢ üì∏ –ü—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è ‚Äî —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é, —Ä–µ—à—É –∏ –æ–±—ä—è—Å–Ω—é\n"
        "‚Ä¢ üß† –ù–∞–ø–∏—à–∏ /explain ‚Äî –æ–±—ä—è—Å–Ω—é –ª—é–±—É—é —Ç–µ–º—É\n"
        "‚Ä¢ üìù –ù–∞–ø–∏—à–∏ /essay ‚Äî –Ω–∞–ø–∏—à—É —Å–æ—á–∏–Ω–µ–Ω–∏–µ\n"
        "‚Ä¢ üìö –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏ –∫–ª–∞—Å—Å\n"
        "‚Ä¢ üë®‚Äçüë©‚Äçüëß –í–∫–ª—é—á–∏ —Ä–µ–∂–∏–º –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π ‚Äî –ø–æ–ª—É—á–∏—à—å –ø–∞–º—è—Ç–∫—É\n\n"
        "<b>üìå –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é\n"
        "2. –ò–ª–∏ –ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É: /help, /essay, /explain\n"
        "3. –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ ‚Äî –º–æ–∂–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å: ¬´–î–∞¬ª –∏–ª–∏ ¬´–ù–µ—Ç¬ª\n\n"
        "<b>üí° –°–æ–≤–µ—Ç:</b> –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Å–Ω—è—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º.\n\n"
        "–°–æ–∑–¥–∞–Ω –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ 5‚Äì11 –∫–ª–∞—Å—Å–æ–≤. ¬© 2025",
        reply_markup=kb(update.effective_user.id)
    )

async def subject_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω–æ: " + ", ".join(sorted(SUBJECTS)), reply_markup=kb(uid))
    val = " ".join(context.args).strip().lower()
    if val not in SUBJECTS:
        return await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –ø—Ä–µ–¥–º–µ—Ç. –î–æ—Å—Ç—É–ø–Ω–æ: " + ", ".join(sorted(SUBJECTS)), reply_markup=kb(uid))
    USER_SUBJECT[uid] = val
    await update.message.reply_text(f"–ü—Ä–µ–¥–º–µ—Ç: {val}", reply_markup=kb(uid))

async def grade_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args or context.args[0] not in [str(i) for i in range(5, 12)]:
        return await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /grade 7", reply_markup=kb(uid))
    USER_GRADE[uid] = context.args[0]
    await update.message.reply_text(f"–ö–ª–∞—Å—Å: {USER_GRADE[uid]}", reply_markup=kb(uid))

async def parent_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args or context.args[0].lower() not in {"on", "off"}:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /parent on  –∏–ª–∏  /parent off", reply_markup=kb(uid))
    PARENT_MODE[uid] = (context.args[0].lower() == "on")
    status = "–≤–∫–ª" if PARENT_MODE[uid] else "–≤—ã–∫–ª"
    await update.message.reply_text(f"–†–µ–∂–∏–º –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {status}", reply_markup=kb(uid))

# ---------- GPT-—Ö–µ–ª–ø–µ—Ä—ã ----------
def _answers_hint(task_lang: str) -> str:
    if task_lang == "be":
        return "–ü–∏—à–∏ <b>–û—Ç–≤–µ—Ç—ã</b> –Ω–∞ —è–∑—ã–∫–µ –∑–∞–¥–∞–Ω–∏—è (–±–µ–ª–æ—Ä—É—Å—Å–∫–æ–º). <b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ</b> ‚Äî –ø–æ-—Ä—É—Å—Å–∫–∏."
    if task_lang == "de":
        return "Write the <b>Answers</b> in German. The <b>Explanation</b> must be in Russian."
    if task_lang == "fr":
        return "√âcris les <b>R√©ponses</b> en fran√ßais. L‚Äô<b>Explication</b> doit √™tre en russe."
    if task_lang == "en":
        return "Write the <b>Answers</b> in English. The <b>Explanation</b> must be in Russian."
    return "–ü–∏—à–∏ <b>–û—Ç–≤–µ—Ç—ã</b> –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. <b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ</b> ‚Äî –ø–æ-—Ä—É—Å—Å–∫–∏."

async def gpt_explain(uid: int, prompt: str, prepend_prompt: bool = True) -> str:
    log.info(f"EXPLAIN/SOLVE uid={uid} subj={USER_SUBJECT[uid]} grade={USER_GRADE[uid]} text={prompt[:80]!r}")
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –≤—Ö–æ–¥–∞ (–¥–ª—è —è–∑—ã–∫–∞ ¬´–û—Ç–≤–µ—Ç–æ–≤¬ª)
    lang = detect_lang(prompt)
    USER_LANG[uid] = lang

    if USER_SUBJECT[uid] == "auto":
        # –ø—Ä–æ–±—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
        subj = await classify_subject(prompt)
        if subj in SUBJECTS:
            USER_SUBJECT[uid] = subj
            log.info(f"Subject classified as: {subj}")

    if not prepend_prompt:
        user_content = prompt
    else:
        user_content = (
            "–†–µ—à–∏ —à–∫–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ü–û–õ–ù–û–°–¢–¨–Æ. "
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–∞–π —Ä–∞–∑–¥–µ–ª <b>–û—Ç–≤–µ—Ç—ã</b> ‚Äî –≥–æ—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø—É–Ω–∫—Ç–∞–º (–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã/–æ–∫–æ–Ω—á–∞–Ω–∏—è, –≥–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤, "
            "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è, —á–∏—Å–ª–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –ø—Ä.) –Ω–∞ –Ø–ó–´–ö–ï –ó–ê–î–ê–ù–ò–Ø. "
            "–ó–∞—Ç–µ–º –≤—ã–¥–∞–π —Ä–∞–∑–¥–µ–ª <b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ</b> ‚Äî –∫—Ä–∞—Ç–∫–æ, –ü–û-–†–£–°–°–ö–ò, –ø–æ —à–∞–≥–∞–º. "
            f"{_answers_hint(lang)} "
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ¬´–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å/—Ä–∞—Å–∫—Ä–∞—Å–∏—Ç—å/—Å–æ–µ–¥–∏–Ω–∏—Ç—å —Å—Ç—Ä–µ–ª–∫–∞–º–∏¬ª ‚Äî –¥–∞–π —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ. "
            "–ï—Å–ª–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π ‚Äî –æ—Ñ–æ—Ä–º–∏ –∫–∞–∫ <b>–ó–∞–¥–∞–Ω–∏–µ 1</b>, <b>–ó–∞–¥–∞–Ω–∏–µ 2</b>‚Ä¶ "
            f"–¢–µ–∫—Å—Ç/—É—Å–ª–æ–≤–∏–µ:\n{prompt}"
        )

    # –∏–Ω–¥–∏–∫–∞—Ü–∏—è ¬´–ø–µ—á–∞—Ç–∞–µ—Ç¬ª –≤–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    # (–≤—ã–∑–æ–≤ —Å–∞–º –ø–æ —Å–µ–±–µ –±—ã—Å—Ç—Ä—ã–π, –Ω–æ —ç—Ç–æ –ø—Ä–∏—è—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è)
    messages = [
        {"role": "system", "content": sys_prompt(uid)},
        {"role": "user", "content": user_content}
    ]
    resp = await client.chat.completions.create(
        model="gpt-4o",
        messages=messages,
        temperature=0.2,
        max_tokens=1000
    )
    return (resp.choices[0].message.content or "").strip()

async def gpt_essay(uid: int, topic: str) -> str:
    log.info(f"ESSAY uid={uid} topic={topic[:80]!r}")
    USER_LANG[uid] = detect_lang(topic)
    resp = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": sys_prompt(uid)},
            {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ. –¢–µ–º–∞: {topic}"}
        ],
        temperature=0.7,
        max_tokens=1200
    )
    return (resp.choices[0].message.content or "").strip()

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
async def explain_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = " ".join(context.args).strip()
    if not text:
        USER_STATE[uid] = "AWAIT_EXPLAIN"
        return await update.message.reply_text("üß† –ß—Ç–æ –æ–±—ä—è—Å–Ω–∏—Ç—å/—Ä–µ—à–∏—Ç—å? –ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π.", reply_markup=kb(uid))
    try:
        await context.bot.send_chat_action(update.effective_chat.id, ChatAction.TYPING)
        if USER_SUBJECT[uid] == "auto":
            # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ¬´–ø–æ–∫–∞–∑—ã–≤–∞–µ–º¬ª –∞–Ω–∏–º–∞—Ü–∏—é
            subj = await classify_subject(text)
            if subj in SUBJECTS:
                USER_SUBJECT[uid] = subj
        out = await gpt_explain(uid, text)
        await safe_reply_html(update.message, out, reply_markup=kb(uid))
        keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ —Ä–µ—à–µ–Ω–∏—é?", reply_markup=keyboard)
        USER_STATE[uid] = "AWAIT_FOLLOWUP"
    except Exception as e:
        log.exception("explain")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=kb(uid))

async def essay_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    topic = " ".join(context.args).strip()
    if not topic:
        USER_STATE[uid] = "AWAIT_ESSAY"
        return await update.message.reply_text("üìù –¢–µ–º–∞ —Å–æ—á–∏–Ω–µ–Ω–∏—è?", reply_markup=kb(uid))
    try:
        await context.bot.send_chat_action(update.effective_chat.id, ChatAction.TYPING)
        essay = await gpt_essay(uid, topic)
        await safe_reply_html(update.message, essay, reply_markup=kb(uid))

        plan_prompt = (
            f"–°–æ—Å—Ç–∞–≤—å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Å–æ—á–∏–Ω–µ–Ω–∏—è –Ω–∞ —Ç–µ–º—É '{topic}'. "
            "–ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –∫–æ—Ä–æ—Ç–∫–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ HTML-—Ç–µ–≥–∏ <b>, <i>, <code>, <pre>."
        )
        await context.bot.send_chat_action(update.effective_chat.id, ChatAction.TYPING)
        plan = await gpt_explain(uid, plan_prompt, prepend_prompt=False)
        await safe_reply_html(update.message, plan, reply_markup=kb(uid))

        reason_prompt = (
            f"–ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –¥–ª—è —Å–æ—á–∏–Ω–µ–Ω–∏—è –Ω–∞ —Ç–µ–º—É '{topic}' –≤—ã–±—Ä–∞–Ω —Ç–∞–∫–æ–π –ø–ª–∞–Ω. "
            "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ HTML-—Ç–µ–≥–∏ <b>, <i>, <code>, <pre>."
        )
        await context.bot.send_chat_action(update.effective_chat.id, ChatAction.TYPING)
        reason = await gpt_explain(uid, reason_prompt, prepend_prompt=False)
        await safe_reply_html(update.message, reason, reply_markup=kb(uid))

        keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–•–æ—á–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ —Å–æ—á–∏–Ω–µ–Ω–∏—é?", reply_markup=keyboard)
        USER_STATE[uid] = "AWAIT_FOLLOWUP"
    except Exception as e:
        log.exception("essay")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=kb(uid))

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    try:
        # –∞–Ω–∏–º–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
        await context.bot.send_chat_action(update.effective_chat.id, ChatAction.UPLOAD_PHOTO)

        # –ë–µ—Ä—ë–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ –∏–∑ photo, —Ç–∞–∫ –∏ –∏–∑ document (–µ—Å–ª–∏ —ç—Ç–æ image/*)
        tg_file = None
        if update.message.photo:
            tg_file = await update.message.photo[-1].get_file()
        elif update.message.document and str(update.message.document.mime_type or "").startswith("image/"):
            tg_file = await update.message.document.get_file()
        else:
            raise ValueError("No image provided")

        data = await tg_file.download_as_bytearray()
        img = Image.open(io.BytesIO(data))

        # –∞–Ω–∏–º–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è: –∏–¥—ë—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        await context.bot.send_chat_action(update.effective_chat.id, ChatAction.TYPING)
        ocr_text = ocr_image(img)
        log.info(f"OCR uid={uid} text={ocr_text!r}")

        if not ocr_text or not ocr_text.strip():
            raise ValueError("OCR returned empty text")

        # –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ —Ñ–æ—Ç–æ (–¥–ª—è —è–∑—ã–∫–∞ ¬´–û—Ç–≤–µ—Ç–æ–≤¬ª)
        USER_LANG[uid] = detect_lang(ocr_text)

        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ —Ñ–æ—Ç–æ
        if USER_SUBJECT[uid] == "auto":
            await context.bot.send_chat_action(update.effective_chat.id, ChatAction.TYPING)
            subj = await classify_subject(ocr_text)
            if subj in SUBJECTS:
                USER_SUBJECT[uid] = subj
                log.info(f"Subject from photo: {subj}")

        # —Ä–µ—à–∞–µ–º
        await context.bot.send_chat_action(update.effective_chat.id, ChatAction.TYPING)
        out = await gpt_explain(uid, ocr_text[:4000])
        await safe_reply_html(update.message, out, reply_markup=kb(uid))

    except Exception:
        log.exception("photo")
        keyboard = ReplyKeyboardMarkup(
            [["üì∏ –†–µ—à–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ", "‚úçÔ∏è –ù–∞–ø–∏—à—É —Ç–µ–∫—Å—Ç–æ–º"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–º:",
            reply_markup=keyboard
        )
        USER_STATE[uid] = "AWAIT_TEXT_OR_PHOTO_CHOICE"

# ---------- –¢–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ ----------
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    raw_text = (update.message.text or "").strip()
    text = raw_text.lower()
    state = USER_STATE[uid]

    # –∞–Ω–∏–º–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    await context.bot.send_chat_action(update.effective_chat.id, ChatAction.TYPING)

    # –ê–≤—Ç–æ-–¥–µ—Ç–µ–∫—Ç —è–∑—ã–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è —è–∑—ã–∫–∞ ¬´–û—Ç–≤–µ—Ç–æ–≤¬ª)
    if raw_text:
        USER_LANG[uid] = detect_lang(raw_text)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ
    if state == "AWAIT_TEXT_OR_PHOTO_CHOICE":
        if text == "üì∏ —Ä–µ—à–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ":
            USER_STATE[uid] = None
            return await update.message.reply_text("–•–æ—Ä–æ—à–æ! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è.", reply_markup=kb(uid))
        elif text == "‚úçÔ∏è –Ω–∞–ø–∏—à—É —Ç–µ–∫—Å—Ç–æ–º":
            USER_STATE[uid] = "AWAIT_EXPLAIN"
            return await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º ‚Äî —è –≤—Å—ë —Å–¥–µ–ª–∞—é.", reply_markup=kb(uid))
        else:
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏: '–†–µ—à–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ' –∏–ª–∏ '–ù–∞–ø–∏—à—É —Ç–µ–∫—Å—Ç–æ–º'")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è
    if state == "AWAIT_FOLLOWUP":
        if text == "–¥–∞":
            USER_STATE[uid] = "AWAIT_EXPLAIN"
            return await update.message.reply_text("–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ?", reply_markup=kb(uid))
        elif text == "–Ω–µ—Ç":
            USER_STATE[uid] = None
            return await update.message.reply_text("–û–∫! –ï—Å–ª–∏ —á—Ç–æ ‚Äî –ø–∏—à–∏ —Å–Ω–æ–≤–∞.", reply_markup=kb(uid))
        else:
            return await update.message.reply_text("–û—Ç–≤–µ—Ç—å: –î–∞ –∏–ª–∏ –ù–µ—Ç")

    # –ö–Ω–æ–ø–∫–∏
    if text == "üß† –æ–±—ä—è—Å–Ω–∏—Ç—å":
        return await explain_cmd(update, context)
    if text == "üìù —Å–æ—á–∏–Ω–µ–Ω–∏–µ":
        return await essay_cmd(update, context)
    if text == "üì∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è":
        return await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ —Ä–µ—à—É.",
            reply_markup=kb(uid),
        )
    if text.startswith("üìö –ø—Ä–µ–¥–º–µ—Ç:"):
        return await update.message.reply_text("–°–º–µ–Ω–∏—Ç—å: /subject <–Ω–∞–∑–≤–∞–Ω–∏–µ|auto>", reply_markup=kb(uid))
    if text.startswith("üéì –∫–ª–∞—Å—Å:"):
        return await update.message.reply_text("–°–º–µ–Ω–∏—Ç—å: /grade 5‚Äì11", reply_markup=kb(uid))
    if text.startswith("üë®‚Äçüë©‚Äçüëß —Ä–æ–¥–∏—Ç.:"):
        return await update.message.reply_text("–í–∫–ª/–≤—ã–∫–ª: /parent on|off", reply_markup=kb(uid))
    if text in {"üìã –º–µ–Ω—é /menu", "‚ÑπÔ∏è –ø–æ–º–æ—â—å"}:
        return await help_cmd(update, context)

    # –°–æ—Å—Ç–æ—è–Ω–∏—è
    if state == "AWAIT_EXPLAIN":
        USER_STATE[uid] = None
        context.args = [raw_text]
        return await explain_cmd(update, context)
    if state == "AWAIT_ESSAY":
        USER_STATE[uid] = None
        context.args = [raw_text]
        return await essay_cmd(update, context)

    # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç = —Ä–µ—à–∏—Ç—å/–æ–±—ä—è—Å–Ω–∏—Ç—å
    context.args = [raw_text]
    return await explain_cmd(update, context)

# ---------- MAIN ----------
def main():
    threading.Thread(target=_run_health, daemon=True).start()
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.post_init = set_commands

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_cmd))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("about", about_cmd))
    app.add_handler(CommandHandler("subject", subject_cmd))
    app.add_handler(CommandHandler("grade", grade_cmd))
    app.add_handler(CommandHandler("parent", parent_cmd))
    app.add_handler(CommandHandler("essay", essay_cmd))
    app.add_handler(CommandHandler("explain", explain_cmd))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(MessageHandler(f.PHOTO | f.Document.IMAGE, handle_photo))
    app.add_handler(MessageHandler(f.TEXT & ~f.COMMAND, on_text))

    log.info("Gotovo bot is running‚Ä¶")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
